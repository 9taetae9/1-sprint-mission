name: CD - Deploy to AWS ECS

on:
  push:
    branches: [ release ]

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY_URI: ${{ vars.ECR_REPOSITORY_URI }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  ECS_SERVICE: ${{ vars.ECS_SERVICE }}
  ECS_TASK_DEFINITION: ${{ vars.ECS_TASK_DEFINITION }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials for ECR
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public
          mask-password: 'true' # 비밀번호 마스킹 활성화

      - name: Build and Push Docker image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REPOSITORY_URI:$IMAGE_TAG -t $ECR_REPOSITORY_URI:latest .
          docker push $ECR_REPOSITORY_URI:$IMAGE_TAG
          docker push $ECR_REPOSITORY_URI:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials for ECS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Download current task definition
        run: |
          aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION \
          --query taskDefinition > task-definition.json

      - name: Update task definition with new image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # 필드 정제 및 이미지 업데이트
          jq --arg IMAGE "$ECR_REPOSITORY_URI:$IMAGE_TAG" '
            .containerDefinitions[0].image = $IMAGE
            | del(.taskDefinitionArn, .revision, .status, 
                 .requiresAttributes, .compatibilities,
                 .registeredAt, .registeredBy)' \
            task-definition.json > new-task-definition.json

          # 새 태스크 정의 등록
          NEW_TASK_DEF=$(aws ecs register-task-definition --cli-input-json file://new-task-definition.json)
          echo "NEW_TASK_DEF_ARN=$(echo $NEW_TASK_DEF | jq -r '.taskDefinition.taskDefinitionArn')" >> $GITHUB_ENV

      - name: Scale down existing service
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --desired-count 0

      - name: Wait for service stabilization
        run: sleep 60

      - name: Update ECS service with new task definition
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition $NEW_TASK_DEF_ARN \
            --desired-count 1 \
            --force-new-deployment
