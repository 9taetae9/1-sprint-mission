spring:
  application:
    name: discodeit
  servlet:
    multipart:
      maxFileSize: 10MB # 파일 하나의 최대 크기
      maxRequestSize: 30MB  # 한 번에 최대 업로드 가능 용량
  jpa:
    properties:
      hibernate:
        format_sql: true
    open-in-view: false
  profiles:
    active: dev
  output:
    ansi:
      enabled: always

logging:
  level:
    root: info
    org.hibernate.SQL: debug
    org.hibernate.orm.jdbc.bind: trace

discodeit:
  storage:
    type: ${STORAGE_TYPE:local} # local | s3 (기본값: local)
    local:
      root-path: ${STORAGE_LOCAL_ROOT_PATH:.discodeit/storage}
    s3:
      access-key: ${AWS_S3_ACCESS_KEY}
      secret-key: ${AWS_S3_SECRET_KEY}
      region: ${AWS_S3_REGION}
      bucket: ${AWS_S3_BUCKET}
      presigned-url-expiration: ${AWS_S3_PRESIGNED_URL_EXPIRATION:600} # (기본값: 10분)

#Actuator
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,loggers
  endpoint:
    health:
      show-details: always
  info:
    env:
      enabled: true
    java:
      enabled: true
    build:
      enabled: true

# info 엔드포인트
info:
  application:
    name: ${spring.application.name}
    version: 1.7.0
  java:
    version: ${java.version}
  spring-boot:
    version: 3.4.0
  config:
    datasource:
      url: ${spring.datasource.url}
      driver-clsss-name: ${spring.datasource.driver-class-name}
    jpa:
      ddl-auto: ${spring.jpa.hibernate.ddl-auto}
    storage:
      type: ${discodeit.storage.type}
      path: ${discodeit.storage.local.root-path}
    multipart:
      max-file-size: ${spring.servlet.multipart.maxFileSize}
      max-request-size: ${spring.servlet.multipart.maxRequestSize}